# 懒人配置（含策略组）
# 更新时间：2024-12-06
# Shadowrocket添加配置方法：配置 - 右上角➕ - 粘贴配置链接 - 下载 - 点击对应的配置文件 - 使用配置。
[General]
bypass-system = true
skip-proxy = 192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost,*.local
tun-excluded-routes = 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 255.255.255.255/32, 239.255.255.250/32
dns-server = 119.29.29.29,114.114.114.114,223.5.5.5,system
fallback-dns-server = system
ipv6 = false
prefer-ipv6 = false
dns-fallback-system = false
dns-direct-system = false
icmp-auto-reply = true
always-reject-url-rewrite = false
private-ip-answer = false

[Proxy Group]
# 代理分组类型：
# select:手动切换节点。
# url-test:自动切换延迟最低节点。
# fallback:节点挂掉时自动切换其他可用节点。
# load-balance:不同规则的请求使用分组里的不同节点进行连接。
# random:随机使用分组里的不同节点进行连接。
# ----------
# policy-regex-filter表示正则式或关键词筛选，常用写法：
# 保留节点名称含有关键词A和B的节点:
# (?=.*(A))^(?=.*(B))^.*$
# 保留节点名称含有关键词A或B的节点:
# A|B
# 排除节点名称含有关键词A或B的节点:
# ^((?!(A|B)).)*$
# 保留节点名称含有关键词A并排除含有关键词B的节点:
# (?=.*(A).)^((?!(B)).)*$
# ----------
# 代理分组其他设置参数：
# interval:指定间隔多长时间后需要重新发起测试。
# timeout:如果测试在超时前未完成，放弃测试。
# tolerance:只有当新优胜者的分数高于旧优胜者的分数加上公差时，才会进行线路更换。
# url:指定要测试的URL。
# ----------
# 不含正则筛选的代理分组，示例：
# 名称=类型(如select,url-test,fallback,load-balance,random),策略(如direct,proxy,订阅名称,代理分组,节点),interval=测试周期,timeout=超时时间,tolerance=公差,policy-select-name=指定选择的节点备注名称,select=默认策略(0表示第一个策略,1表示第二个策略,2表示第三个策略……),url=测试地址
# 含正则筛选的代理分组，示例：
# 名称=类型(如select,url-test,fallback,load-balance,random),policy-regex-filter=正则式或关键词筛选,interval=测试周期,timeout=超时时间,tolerance=公差,policy-select-name=指定选择的节点备注名称,select=默认策略(0表示第一个策略,1表示第二个策略,2表示第三个策略……),url=测试地址
# 开启订阅筛选的代理分组，示例：
# 名称=类型(如select,url-test,fallback,load-balance,random),订阅名称(多个订阅时,用逗号分隔),use=true,policy-regex-filter=正则式或关键词筛选(省略该参数时,表示匹配对应订阅的全部节点),interval=测试周期,timeout=超时时间,tolerance=公差,policy-select-name=指定选择的节点备注名称,select=默认策略(0表示第一个策略,1表示第二个策略,2表示第三个策略……),url=测试地址
# ----------
📞 Talkatone = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
📞 GoogleVoice = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌍 Oracle = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
💬 OpenAi = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
📹 YouTube = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎥 Netflix = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌍 Disney = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
📺 HBO = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎥 TikTok = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎶 Spotify = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=1,url=http://www.gstatic.com/generate_204
📲 Telegram = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌍 Twitter = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌍 Facebook = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
💰 PayPal = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=1,url=http://www.gstatic.com/generate_204
🌍 Amazon = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=1,url=http://www.gstatic.com/generate_204
🍎 苹果服务 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
📢 谷歌服务 = select,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
Ⓜ️ 微软服务 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
📺 哔哩哔哩 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎮 游戏平台 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎶 网易音乐 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌍 国外媒体 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🌏 国内媒体 = select,DIRECT,PROXY,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇸🇬 新加坡节点,🇰🇷 韩国节点,🇺🇲 美国节点,interval=86400,timeout=5,select=0,url=http://www.gstatic.com/generate_204
🎯 全球直连 = select,DIRECT,PROXY
  iOS系统更新 = select,REJECT,DIRECT
🛑 广告拦截 = select,REJECT,DIRECT
🍃 应用净化 = select,REJECT,DIRECT
🆎 AdBlock = select,REJECT,DIRECT
🛡️ 隐私防护 = select,REJECT,DIRECT
🐟 漏网之鱼 = select,REJECT,DIRECT,🇭🇰 香港节点,🇨🇳 台湾节点,🇸🇬 狮城节点,🇯🇵 日本节点,🇺🇲 美国节点,🇰🇷 韩国节点,🚀 手动切换
🇭🇰 香港节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(港|HK|(?i)Hong))^((?!(台湾|日本|新加坡|美国|韩国|狮城|南朝鲜|US|SG|JP|KR|TW|台灣|美國|韓國|獅城)).)*$
🇨🇳 台湾节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$
🇯🇵 日本节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(日本|JP|(?i)Japan))^((?!(香港|台湾|新加坡|美国|韩国|狮城|南朝鲜|US|SG|KR|HK|TW|台灣|美國|韓國|獅城)).)*$
🇸🇬 新加坡节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(新加坡|狮城|SG|(?i)Singapore))^((?!(香港|台湾|日本|美国|韩国|南朝鲜|US|JP|KR|HK|TW|台灣|美國|韓國)).)*$
🇰🇷 韩国节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(KR|Korea|KOR|首尔|韩|韓|(?i)Korea))^((?!(香港|台湾|新加坡|美国|狮城|南朝鲜|US|SG|HK|TW|台灣|美國|獅城)).)*$
🇺🇸 美国节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=(?=.*(美国|美國|US|洛杉矶|西雅图|(?i)States|American))^((?!(香港|台湾|日本|新加坡|韩国|狮城|南朝鲜|SG|JP|KR|HK|TW|台灣|韓國|獅城)).)*$
🇷🇺 俄罗斯节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=🇷🇺|俄罗斯|RU|莫斯科|圣彼得堡|喀山|哈尔科夫|乌法|新西伯利亚|下诺夫哥罗德|沃罗涅什
🇬🇧 英国节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=🇬🇧|英国|UK|伦敦|英格兰|伯明翰|泰恩河畔纽卡斯尔|利兹|爱丁堡|格拉斯哥|苏格兰
🇮🇳 印度 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=🇮🇳|印度|IN|IND|孟买|新德里|高知|Republic of India|India
🇩🇪 德国 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=🇩🇪|德国|DEU|DE|柏林|慕尼黑|汉堡|科隆|Germany
🇨🇦 加拿大 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=5,policy-regex-filter=🇨🇦|加拿大|CA|渥太华

[Rule]
# 规则类型：
# DOMAIN-SUFFIX：匹配请求域名的后缀。如“DOMAIN-SUFFIX,example.com,DIRECT”可以匹配到“a.example.com、a.b.example.com”。
# DOMAIN-KEYWORD：匹配请求域名的关键词。如“DOMAIN-KEYWORD,exa,DIRECT”可以匹配到“a.example.com、a.b.example.com”。
# DOMAIN：匹配请求的完整域名。如“DOMAIN,www.example.com,DIRECT”只能匹配到“www.example.com”。
# （当为DOMAIN、DOMAIN-SUFFIX和DOMAIN-KEYWORD类型分别设置相同的值时，只有其中一种类型会生效。）
# USER-AGENT：匹配用户代理字符串，支持使用通配符“*”。如“USER-AGENT,MicroMessenger*,DIRECT”可以匹配到“MicroMessenger Client”。
# URL-REGEX：匹配URL正则式。如“URL-REGEX,^https?://.+/item.+,REJECT”可以匹配到“https://www.example.com/item/abc/123”。
# IP-CIDR：匹配IPv4或IPv6地址。如“IP-CIDR,192.168.1.0/24,DIRECT”可以匹配到IP段“192.168.1.1～192.168.1.254”。当域名请求遇到IP类规则时，Shadowrocket会向本地DNS服务器发送查询请求，以判断主机IP是否匹配规则。若IP类规则加“no-resolve”(如：IP-CIDR,172.16.0.0/12,DIRECT,no-resolve)，则域名请求将会跳过此规则，不会触发本地DNS查询。
# IP-ASN：匹配IP地址隶属的ASN编号。如"IP-ASN,56040,DIRECT"可以匹配到属于China Mobile Communications Corporation网络的IP地址。
# RULE-SET：匹配规则集内容。规则集的内容需包含规则类型，如"https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Shadowrocket/Apple/Apple.list"。（兼容仅包含IP地址且不带规则类型的规则集）
# DOMAIN-SET：匹配域名集内容。域名集的内容不包含规则类型，如"https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Shadowrocket/Apple/Apple_Domain.list"。
# SCRIPT：匹配脚本名称。（创建rule类型脚本，再添加script类型的规则。）
# DST-PORT：匹配目标主机名的端口号。如“DST-PORT,443,DIRECT”可以匹配到443目标端口。
# GEOIP：匹配IP数据库。如“GEOIP,CN,DIRECT”可以匹配到归属地为CN的IP地址。
# FINAL：兜底策略。如“FINAL,PROXY”表示当其他所有规则都匹配不到时才使用FINAL规则的策略。
# AND：逻辑规则，与规则。如“AND,((DOMAIN,www.example.com),(DST-PORT,123)),DIRECT”可以匹配到“www.example.com:123”。
# NOT：逻辑规则，非规则。如“NOT,((DST-PORT,123)),DIRECT”可以匹配到除了“123”端口的其他所有请求。
# OR：逻辑规则，或规则。如“OR,((DST-PORT,123),(DST-PORT,456)),DIRECT”可以匹配到“123”或“456”端口的所有请求。
# ----------
# 规则策略：
# PROXY：代理。通过代理服务器转发流量。
# DIRECT：直连。连接不经过任何代理服务器。
# REJECT：拒绝。返回HTTP状态码404，没有内容。
# REJECT-DICT：拒绝。返回HTTP状态码200，内容为空的JSON对象。
# REJECT-ARRAY：拒绝。返回HTTP状态码200，内容为空的JSON数组。
# REJECT-200：拒绝。返回HTTP状态码200，没有内容。
# REJECT-IMG：拒绝。返回HTTP状态码200，内容为1像素GIF。
# REJECT-TINYGIF：拒绝。返回HTTP状态码200，内容为1像素GIF。
# REJECT-DROP：拒绝。丢弃IP包。
# REJECT-NO-DROP：拒绝。返回ICMP端口不可达。
# 除此之外，规则策略还可以选择「代理分组」、「订阅名称」、「分组」、「节点」。
# ----------
# 规则匹配的优先级：
# 1.模块规则优先于配置文件规则。
# 2.规则从上到下依次匹配。
# 3.域名规则优先于IP规则。
# ----------
# 关于屏蔽443端口的UDP流量的解释内容：HTTP3/QUIC协议开始流行，但是国内ISP和国际出口的UDP优先级都很低，表现很差，屏蔽掉以强制回退HTTP2/HTTP1.1。（如需启用该逻辑规则，请删除AND前面的注释符号#）
# AND,((PROTOCOL,UDP),(DST-PORT,443)),REJECT-NO-DROP
# ----------
# 国外常用服务单独分流：YouTube，Netflix，Disney+，HBO，Spotify，Telegram，PayPal，Twitter，Facebook，Google，TikTok，GitHub，ChatGPT。
# 国内常用服务单独分流：苹果服务，微软服务，哔哩哔哩，网易云音乐，游戏平台，亚马逊，百度，豆瓣，微信，抖音，新浪，知乎，小红书。
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Amazon.list,🌍 Amazon
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/AntiAD.list,🛑 广告拦截
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Apple.list,🍎 苹果服务
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BanAD.list,🛑 广告拦截
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BanEasyList.list,🆎 AdBlock
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BanEasyListChina.list,🆎 AdBlock
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BanEasyPrivacy.list,🛡️ 隐私防护
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BanProgramAD.list,🍃 应用净化
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/BiliBili.list,📺 哔哩哔哩
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ChinaMedia.list,🌏 国内媒体
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Disney.list,🌍 Disney
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Facebook.list,🌍 Facebook
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Game.list,🎮 游戏平台
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Google.list,📢 谷歌服务
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/GoogleVoice.list,📞 GoogleVoice
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/HBO.list,📺 HBO
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/IOSSystemOTA.list,  iOS系统更新
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Microsoft.list,Ⓜ️ 微软服务
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/NetEaseMusic.list,🎶 网易音乐
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Netflix.list,🎥 Netflix
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/OpenAi.list,💬 OpenAi
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Oracle.list,🌍 Oracle
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/PayPal.list,💰 PAYPAL
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ProxyMedia.list,🌍 国外媒体
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Spotify.list,🎶 Spotify
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Talkatone.list,📞 Talkatone
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Telegram.list,📲 Telegram
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/TikTok.list,🎥 TikTok
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/YouTube.list,📹 YouTube
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/Cloudflare.list,🎯 全球直连
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ChinaCompanyIp.list,🎯 全球直连
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ChinaDomain.list,🎯 全球直连
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ChinaIp.list,🎯 全球直连
RULE-SET,https://raw.githubusercontent.com/xuxuliooo/Rules/master/Rule/ChinaIpV6.list,🎯 全球直连
# 表示CN地区的IP分流走直连，GEOIP数据库用来判断IP是否属于CN地区。默认使用Shadowrocket自带的GEOIP数据库，如果您想替换其他数据库，可在 设置 - GeoLite2数据库 里添加和修改。
GEOIP,CN,DIRECT
# 表示当其他所有规则都匹配不到时才使用FINAL规则的策略。
FINAL,PROXY

[Host]
# 域名指定本地值：
# example.com=1.2.3.4
# 域名指定DNS服务器：
# example.com=server:1.2.3.4
# wifi名称指定DNS服务器，如需指定多个DNS，可用逗号分隔：
# ssid:wifi名称=server:1.2.3.4
# ----------
*.apple.com=server:system
*.icloud.com=server:system
localhost = 127.0.0.1

[URL Rewrite]
# Google搜索引擎防跳转的重写。
^https?://(www.)?g.cn https://www.google.com 302
^https?://(www.)?google.cn https://www.google.com 302

[MITM]
# Shadowrocket仅会解密hostname指定的域名的请求，可以使用通配符。也可以使用前缀 - 排除特定主机名，如 -*.example.com。iOS系统和某些应用有严格的安全策略，仅信任某些特定的证书，对这些域名启动解密可能导致问题，如 *.apple.com，*.icloud.com。
hostname = *.google.cn
